{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\ReactProjects\\\\Scraper\\\\Calendar\\\\calendar\\\\src\\\\components\\\\Calendar.jsx\";\nimport React from \"react\";\nimport dateFnsFormat from \"date-fns/format\";\nimport dateFnsSOW from \"date-fns/startOfWeek\";\nimport dateFnsEOW from \"date-fns/endOfWeek\";\nimport dateFnsAdddays from \"date-fns/addDays\";\nimport dateFnsSOM from \"date-fns/startOfMonth\";\nimport dateFnsEOM from \"date-fns/endOfMonth\";\n\nclass Calendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentMonth: new Date(),\n      selectedDate: new Date()\n    };\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM yyyy\";\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, dateFnsFormat(this.state.currentMonth, dateFormat)));\n  }\n\n  renderDays() {\n    const dateFormat = \"EEEE\";\n    const days = [];\n    let startDate = dateFnsSOW(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(React.createElement(\"div\", {\n        className: \"col col-center\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, dateFnsFormat(dateFnsAdddays(startDate, i), dateFormat)));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, days);\n  }\n\n  renderMonthDays() {\n    const _this$state = this.state,\n          currentMonth = _this$state.currentMonth,\n          selectedDate = _this$state.selectedDate; //retrive the current month and selected date from the state\n\n    const monthStart = dateFnsSOM(currentMonth); //need to know SOM\n\n    const monthEnd = dateFnsEOM(currentMonth); // and EOM\n\n    const startDate = dateFnsSOW(monthStart);\n    const endDate = dateFnsEOW(monthEnd);\n    const dateFormat = \"d\"; //display single digit day number\n\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\"; //loop through the days in the month \n\n    while (day <= endDate) {\n      for (let iday = 0; iday < 7; iday++) {\n        formattedDate = dateFnsFormat(day, dateFormat);\n        const newDateElement = day;\n        let newDayHTML = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"+\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"+\", formattedDate, \"+\"), \"+\");\n        days.push(newDayHTML);\n      }\n\n      day = dateFnsAdddays(day, 1);\n    } //add the colection of days to the row\n\n\n    rows.push(React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, days));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.renderHeader(), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.renderDays()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.renderMonthDays()));\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["D:/Development/ReactProjects/Scraper/Calendar/calendar/src/components/Calendar.jsx"],"names":["React","dateFnsFormat","dateFnsSOW","dateFnsEOW","dateFnsAdddays","dateFnsSOM","dateFnsEOM","Calendar","Component","state","currentMonth","Date","selectedDate","renderHeader","dateFormat","renderDays","days","startDate","i","push","renderMonthDays","monthStart","monthEnd","endDate","rows","day","formattedDate","iday","newDateElement","newDayHTML","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport dateFnsFormat  from \"date-fns/format\";\r\nimport dateFnsSOW from \"date-fns/startOfWeek\";\r\nimport dateFnsEOW from \"date-fns/endOfWeek\";\r\nimport dateFnsAdddays from \"date-fns/addDays\";\r\nimport dateFnsSOM from \"date-fns/startOfMonth\";\r\nimport dateFnsEOM from \"date-fns/endOfMonth\";\r\n\r\n\r\nclass Calendar extends React.Component{\r\n    state = {\r\n\r\n        currentMonth: new Date(),\r\n    \r\n        selectedDate: new Date()\r\n    \r\n      };\r\n\r\n    renderHeader(){\r\n        const dateFormat = \"MMMM yyyy\";\r\n\r\n        return(\r\n            <div><span>{dateFnsFormat(this.state.currentMonth, dateFormat)}</span></div>\r\n        );\r\n    }\r\n\r\n    renderDays(){\r\n        const dateFormat = \"EEEE\";\r\n        const days = [];\r\n        let startDate = dateFnsSOW(this.state.currentMonth);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n              <div className=\"col col-center\" key={i}>\r\n                {dateFnsFormat(dateFnsAdddays(startDate, i), dateFormat)}\r\n              </div>\r\n            );\r\n          }\r\n\r\n        return(\r\n            <div className=\"row\">{days}</div>\r\n        );\r\n    }\r\n\r\n    renderMonthDays(){\r\n\r\n        const { currentMonth, selectedDate } = this.state; //retrive the current month and selected date from the state\r\n        const monthStart = dateFnsSOM(currentMonth); //need to know SOM\r\n        const monthEnd = dateFnsEOM(currentMonth); // and EOM\r\n        const startDate = dateFnsSOW(monthStart); \r\n        const endDate = dateFnsEOW(monthEnd);\r\n\r\n        const dateFormat =\"d\"; //display single digit day number\r\n        const rows = [];\r\n\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate =\"\";\r\n        //loop through the days in the month \r\n        while(day<=endDate){\r\n            for(let iday = 0;iday<7;iday++){\r\n                formattedDate = dateFnsFormat(day,dateFormat);\r\n                const newDateElement = day;\r\n                let newDayHTML =<div>+ \r\n                <span>+{formattedDate}+</span>+\r\n                </div>;\r\n                days.push(newDayHTML);\r\n\r\n            }\r\n            day = dateFnsAdddays(day,1);\r\n        }\r\n\r\n        //add the colection of days to the row\r\n        rows.push(<div>\r\n            {days}\r\n        </div>)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div >\r\n                {this.renderHeader()}\r\n                <div>{this.renderDays()}</div>\r\n                <div>{this.renderMonthDays()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}