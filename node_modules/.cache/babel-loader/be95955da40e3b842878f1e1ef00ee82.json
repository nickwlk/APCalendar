{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\ReactProjects\\\\Scraper\\\\Calendar\\\\calendar\\\\src\\\\components\\\\Calendar.jsx\";\nimport React from \"react\";\nimport NewCalendarItem from \"./NewItem\";\nimport RemoveCalendarItem from \"./RemoveItem\";\nimport AppointmentSummary from \"./AppointmentSummary\";\nimport dateFnsFormat from \"date-fns/format\";\nimport dateFnsSOW from \"date-fns/startOfWeek\";\nimport dateFnsEOW from \"date-fns/endOfWeek\";\nimport dateFnsAdddays from \"date-fns/addDays\";\nimport dateFnsSOM from \"date-fns/startOfMonth\";\nimport dateFnsEOM from \"date-fns/endOfMonth\";\n\nclass Calendar extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentMonth: new Date(),\n      selectedDay: 'Select a date...'\n    };\n    this.SelectDayClick = this.SelectDayClick.bind(this);\n  }\n\n  SelectDayClick(day) {\n    //look up the current appointments\n    //Set the selected day\n    this.setState({\n      selectedDay: day\n    });\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM yyyy\";\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, dateFnsFormat(this.state.currentMonth, dateFormat)));\n  }\n\n  renderDays() {\n    const dateFormat = \"EEEE\";\n    const days = [];\n    let startDate = dateFnsSOW(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(React.createElement(\"div\", {\n        className: \"col col-center\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, dateFnsFormat(dateFnsAdddays(startDate, i), dateFormat)));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"days row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, days);\n  }\n\n  renderMonthDays() {\n    const _this$state = this.state,\n          currentMonth = _this$state.currentMonth,\n          selectedDate = _this$state.selectedDate; //retrive the current month and selected date from the state\n\n    const monthStart = dateFnsSOM(currentMonth); //need to know SOM\n\n    const monthEnd = dateFnsEOM(currentMonth); // and EOM\n\n    const startDate = dateFnsSOW(monthStart);\n    const endDate = dateFnsEOW(monthEnd);\n    const dateFormat = \"d\"; //display single digit day number\n\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\"; //loop through the days in the month \n\n    while (day <= endDate) {\n      for (let iday = 0; iday < 7; iday++) {\n        formattedDate = dateFnsFormat(day, dateFormat);\n        const newDateElement = day; //apply same formatting as the day columns\n\n        let newDayHTML = React.createElement(\"div\", {\n          className: \"col cell\",\n          key: iday,\n          id: iday,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          onClick: this.SelectDayClick.bind(this, formattedDate),\n          className: \"bg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, formattedDate));\n        days.push(newDayHTML);\n        day = dateFnsAdddays(day, 1);\n      } //add the colection of days to the row\n\n\n      rows.push(React.createElement(\"div\", {\n        className: \"row\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, days));\n      days = [];\n    }\n\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, rows);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.renderHeader(), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.renderDays()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.renderMonthDays()), React.createElement(\"div\", {\n      className: \"calendarControls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(NewCalendarItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(AppointmentSummary, {\n      selectedDay: this.state.selectedDay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["D:/Development/ReactProjects/Scraper/Calendar/calendar/src/components/Calendar.jsx"],"names":["React","NewCalendarItem","RemoveCalendarItem","AppointmentSummary","dateFnsFormat","dateFnsSOW","dateFnsEOW","dateFnsAdddays","dateFnsSOM","dateFnsEOM","Calendar","Component","constructor","state","currentMonth","Date","selectedDay","SelectDayClick","bind","day","setState","renderHeader","dateFormat","renderDays","days","startDate","i","push","renderMonthDays","selectedDate","monthStart","monthEnd","endDate","rows","formattedDate","iday","newDateElement","newDayHTML","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport NewCalendarItem from \"./NewItem\"\r\nimport RemoveCalendarItem from \"./RemoveItem\"\r\nimport AppointmentSummary from \"./AppointmentSummary\"\r\n\r\nimport dateFnsFormat  from \"date-fns/format\";\r\nimport dateFnsSOW from \"date-fns/startOfWeek\";\r\nimport dateFnsEOW from \"date-fns/endOfWeek\";\r\nimport dateFnsAdddays from \"date-fns/addDays\";\r\nimport dateFnsSOM from \"date-fns/startOfMonth\";\r\nimport dateFnsEOM from \"date-fns/endOfMonth\";\r\n\r\n\r\nclass Calendar extends React.Component{\r\n    constructor(){\r\n        super();\r\n    this.state = {\r\n        currentMonth: new Date(),    \r\n        selectedDay: 'Select a date...'    \r\n      };\r\n      this.SelectDayClick = this.SelectDayClick.bind(this);\r\n    }\r\n      SelectDayClick(day){\r\n          //look up the current appointments\r\n          \r\n          //Set the selected day\r\n          this.setState({selectedDay:day});\r\n          \r\n      }\r\n\r\n    renderHeader(){\r\n        const dateFormat = \"MMMM yyyy\";\r\n\r\n        return(\r\n            <div><span>{dateFnsFormat(this.state.currentMonth, dateFormat)}</span></div>\r\n        ); \r\n    }\r\n\r\n    renderDays(){\r\n        const dateFormat = \"EEEE\";\r\n        const days = [];\r\n        let startDate = dateFnsSOW(this.state.currentMonth);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n              <div className=\"col col-center\" key={i}>\r\n                {dateFnsFormat(dateFnsAdddays(startDate, i), dateFormat)}\r\n              </div>\r\n            );\r\n          }\r\n\r\n        return(\r\n            <div className=\"days row\">{days}</div>\r\n        );\r\n    }\r\n\r\n    renderMonthDays(){\r\n\r\n        const { currentMonth, selectedDate } = this.state; //retrive the current month and selected date from the state\r\n        const monthStart = dateFnsSOM(currentMonth); //need to know SOM\r\n        const monthEnd = dateFnsEOM(currentMonth); // and EOM\r\n        const startDate = dateFnsSOW(monthStart); \r\n        const endDate = dateFnsEOW(monthEnd);\r\n\r\n        const dateFormat =\"d\"; //display single digit day number\r\n        const rows = [];\r\n\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate =\"\";\r\n        \r\n        //loop through the days in the month \r\n        while(day<=endDate){\r\n          \r\n            for(let iday = 0;iday<7;iday++){\r\n                formattedDate = dateFnsFormat(day,dateFormat);\r\n                \r\n                const newDateElement = day;\r\n                //apply same formatting as the day columns\r\n                let newDayHTML =<div className=\"col cell\" key = {iday} id={iday}> \r\n                <span onClick={this.SelectDayClick.bind(this,formattedDate)} className=\"bg\">{formattedDate}</span>\r\n                </div>;\r\n                days.push(newDayHTML);\r\n                day = dateFnsAdddays(day,1);\r\n            }\r\n              //add the colection of days to the row\r\n        rows.push(<div className=\"row\" key={day}>\r\n            {days}\r\n            </div>);\r\n            days = [];\r\n        }\r\n        return <div className=\"body\">{rows}</div>;\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div >\r\n                {this.renderHeader()}\r\n                <div>{this.renderDays()}</div>\r\n                \r\n                <div>{this.renderMonthDays()}</div>\r\n                <div className=\"calendarControls\">                    \r\n                    <NewCalendarItem/>\r\n                    \r\n                </div>\r\n                <AppointmentSummary selectedDay={this.state.selectedDay}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}